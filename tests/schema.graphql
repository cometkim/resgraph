type Query {
  listAsArgs(regularList: [String]!, optionalList: [String!], nullableList: [String], nullableInnerList: [String], list1: [String], list2: [[String]], list3: [[[String!]!]]): [String!]!
  allowExplicitNull(someNullable: String): String!
  searchForUser(input: UserConfig!): User
  entity(id: ID!): UserOrGroup!
  me: User
}

"""A user in the system."""
type User implements HasName {
  allNames: [String!]!
  currentStatus: UserStatus!
  name(includeFullName: Boolean): String!
  id: ID!

  """The age of the user."""
  age: Int!

  """The last age of the user."""
  lastAge: Int @deprecated(reason: "Use 'age' instead.")
}

"""An entity with a name."""
interface HasName {
  name: String!
}

"""Indicates what status a user currently has."""
enum UserStatus {
  """User is online."""
  Online

  """User is offline."""
  Offline

  """User is idle."""
  Idle @deprecated(reason: "Use 'Offline' instead.")
}

"""Configuration for searching for a user."""
input UserConfig {
  """The ID of a user to search for."""
  id: String!

  """The name of the user to search for."""
  name: String @deprecated(reason: "This is going away")
  context: UserConfigContext
}

"""Additional for searching for a user."""
input UserConfigContext {
  groupId: String
  name: String
}

"""A user or a group."""
union UserOrGroup = User | Group

"""A group in the system."""
type Group implements HasName {
  """The group name."""
  name: String!
}

type Mutation {
  addUser(name: String!): User
}
