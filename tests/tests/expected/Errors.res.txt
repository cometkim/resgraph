generating schema from tests/Errors.res

noticing user
Adding enum myEnum
Adding union someUnion
noticing group
Adding input object group2
Adding interface hasName
Checking for type to attach resolver to
noticing query
Adding interface node
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
noticing pet
Adding union userOrGroup
Adding enum userStatus
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
Adding input object userConfigContext
Adding input object userConfig
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
Checking for type to attach resolver to
noticing mutation
Checking for type to attach resolver to
file: ./tests/Query.res
positions: query 1:0 1:15
file: ./tests/Schema.res
positions: pet 12:0 16:1, mutation 146:0 146:18
file: tests/Errors.res
positions: user 4:10 4:62, group 27:10 27:57
{
  "status": "Error",
  "errors": 
    [
            {
        "range": {"start": {"line": 1, "character": 10}, "end": {"line": 1, "character": 31}},
        "file": "tests/Errors.res",
        "message": "This type is annotated with @gql.type, but is not a record. Only records can represent GraphQL object types."
      },
      {
        "range": {"start": {"line": 34, "character": 0}, "end": {"line": 34, "character": 9}},
        "file": "./node_modules/rescript/lib/ocaml/js_dict.mli",
        "message": "The type `t` does not represent a valid GraphQL type."
      },
      {
        "range": {"start": {"line": 4, "character": 34}, "end": {"line": 4, "character": 42}},
        "file": "tests/Errors.res",
        "message": "Field `someDict` is has a @gql.field annotation, but is not a valid GraphQL type. Please change the type of this field to be a valid GraphQL type, or expose this field via a custom written resolver instead if you need to transform it before exposing it in GraphQL."
      },
      {
        "range": {"start": {"line": 7, "character": 10}, "end": {"line": 7, "character": 24}},
        "file": "tests/Errors.res",
        "message": "This type is annotated with @gql.enum, but is not a variant. Only variants can represent GraphQL enums."
      },
      {
        "range": {"start": {"line": 10, "character": 43}, "end": {"line": 10, "character": 47}},
        "file": "tests/Errors.res",
        "message": "The variant member `User` of the GraphQL enum variant `myEnum` has a payload. Variants tagged as @gql.enum can only have members without payloads. "
      },
      {
        "range": {"start": {"line": 15, "character": 10}, "end": {"line": 15, "character": 25}},
        "file": "tests/Errors.res",
        "message": "This type is annotated with @gql.enum, but is not a variant. Only variants can represent GraphQL enums."
      },
      {
        "range": {"start": {"line": 12, "character": 0}, "end": {"line": 12, "character": 54}},
        "file": "tests/Errors.res",
        "message": "The type `groupWithNoAnnotation` does not represent a valid GraphQL type."
      },
      {
        "range": {"start": {"line": 18, "character": 41}, "end": {"line": 18, "character": 46}},
        "file": "tests/Errors.res",
        "message": "The payload of the variant member `Group` of the GraphQL union variant `someUnion` is not a GraphL object. The payload needs to be a single type representing a GraphQL object, meaning it's annotated with @gql.type."
      },
      {
        "range": {"start": {"line": 21, "character": 17}, "end": {"line": 21, "character": 38}},
        "file": "tests/Errors.res",
        "message": "This type is annotated with @gql.inputObject, but is not a record. Only records can represent GraphQL input objects."
      },
      {
        "range": {"start": {"line": 24, "character": 15}, "end": {"line": 24, "character": 28}},
        "file": "tests/Errors.res",
        "message": "This let binding is annotated with @gql.field, but is not a function. Only functions can represent GraphQL field resolvers."
      },
      {
        "range": {"start": {"line": 27, "character": 35}, "end": {"line": 27, "character": 39}},
        "file": "tests/Errors.res",
        "message": "This is not a valid GraphQL type: promise<string>"
      },
      {
        "range": {"start": {"line": 27, "character": 35}, "end": {"line": 27, "character": 39}},
        "file": "tests/Errors.res",
        "message": "Field `name` is has a @gql.field annotation, but is not a valid GraphQL type. Please change the type of this field to be a valid GraphQL type, or expose this field via a custom written resolver instead if you need to transform it before exposing it in GraphQL."
      },
      {
        "range": {"start": {"line": 28, "character": 32}, "end": {"line": 28, "character": 36}},
        "file": "tests/Errors.res",
        "message": "This is not a valid GraphQL type: promise<string>"
      },
      {
        "range": {"start": {"line": 28, "character": 32}, "end": {"line": 28, "character": 36}},
        "file": "tests/Errors.res",
        "message": "Field `name` is is not a valid GraphQL type. All fields of a @gql.inputObject must be valid GraphQL types."
      }
    ]
}
