Complete tests/Completion.res 0:4
Attribute id:g:[0:3->0:5] label:g
{"status": "Completion", "items": [{
    "label": "gql.type",
    "kind": 4,
    "tags": [],
    "detail": "Indicates that the annotated record is a GraphQL Object Type.",
    "documentation": null
  }, {
    "label": "gql.interface",
    "kind": 4,
    "tags": [],
    "detail": "Indicates that the annotated record is a GraphQL interface.",
    "documentation": null
  }, {
    "label": "gql.interfaceResolver",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.field",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.enum",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.union",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.inputObject",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.scalar",
    "kind": 4,
    "tags": [],
    "detail": "",
    "documentation": null
  }, {
    "label": "gql.type snippet - simple connection",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for creating a new simple GraphQL connection for pagination.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.type\n/** An edge in a connection. */\ntype ${1:entity}Edge = ResGraph.Connections.edge<${1:entity}>\n\n/** A connection to a list of items. */\n@gql.type\ntype ${1:entity}Connection = ResGraph.Connections.connection<${1:entity}Edge>",
    "insertTextFormat": 2
  }, {
    "label": "gql.type snippet - full connection",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for creating a new GraphQL connection for pagination.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.type\n/** An edge in a connection. */\ntype ${1:entity}Edge = {\n  /** A cursor for use in pagination. */\n  @gql.field\n  cursor: string,\n  /** The item at the end of the edge. */\n  @gql.field\n  node: option<${1:entity}>\n}\n\n/** A connection to a list of items. */\n@gql.type\ntype ${1:entity}Connection = {\n  /** Information to aid in pagination. */\n  @gql.field\n  pageInfo: ResGraph.Connections.pageInfo,\n  /** A list of edges. */\n  @gql.field\n  edges: option<array<option<${1:entity}Edge>>>\n}",
    "insertTextFormat": 2
  }, {
    "label": "gql.type snippet - field function on type",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for adding a new field to a type via a function.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.field\nlet ${1:fieldName} = async (${2:entity}: ${2:entity}) => {\n  ${0:Some(entity.prop)}\n}",
    "insertTextFormat": 2
  }, {
    "label": "gql.field snippet - query field",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for adding a new field to the root query.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.field\nlet ${1:fieldName} = async (_: Query.query, ~ctx: ResGraphContext.context) => {\n  ${0:Some(entity.prop)}\n}",
    "insertTextFormat": 2
  }, {
    "label": "gql.field snippet - full mutation",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for adding a new mutation the mutation type.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.union\ntype ${1:mutationName}Result = Success({ok: bool}) | Error({reason: string})\n\n@gql.field\nlet ${1:mutationName} = async (_: Schema.mutation, ~ctx: ResGraphContext.context) => {\n  Success({ok: true})\n}",
    "insertTextFormat": 2
  }]}
Complete tests/Completion.res 3:10
Attribute id:gql.ty:[3:3->3:10] label:gql.ty
{"status": "Completion", "items": [{
    "label": "gql.type",
    "kind": 4,
    "tags": [],
    "detail": "Indicates that the annotated record is a GraphQL Object Type.",
    "documentation": null
  }, {
    "label": "gql.type snippet - simple connection",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for creating a new simple GraphQL connection for pagination.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.type\n/** An edge in a connection. */\ntype ${1:entity}Edge = ResGraph.Connections.edge<${1:entity}>\n\n/** A connection to a list of items. */\n@gql.type\ntype ${1:entity}Connection = ResGraph.Connections.connection<${1:entity}Edge>",
    "insertTextFormat": 2
  }, {
    "label": "gql.type snippet - full connection",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for creating a new GraphQL connection for pagination.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.type\n/** An edge in a connection. */\ntype ${1:entity}Edge = {\n  /** A cursor for use in pagination. */\n  @gql.field\n  cursor: string,\n  /** The item at the end of the edge. */\n  @gql.field\n  node: option<${1:entity}>\n}\n\n/** A connection to a list of items. */\n@gql.type\ntype ${1:entity}Connection = {\n  /** Information to aid in pagination. */\n  @gql.field\n  pageInfo: ResGraph.Connections.pageInfo,\n  /** A list of edges. */\n  @gql.field\n  edges: option<array<option<${1:entity}Edge>>>\n}",
    "insertTextFormat": 2
  }, {
    "label": "gql.type snippet - field function on type",
    "kind": 4,
    "tags": [],
    "detail": "Boilerplate for adding a new field to a type via a function.",
    "documentation": null,
    "sortText": "@gql.a",
    "insertText": "gql.field\nlet ${1:fieldName} = async (${2:entity}: ${2:entity}) => {\n  ${0:Some(entity.prop)}\n}",
    "insertTextFormat": 2
  }]}
Complete tests/Completion.res 6:15
XXX Not found!
{"status": "Completion", "items": [{
    "label": "ctx: ResGraphContext.context",
    "kind": 4,
    "tags": [],
    "detail": "Insert ResGraphContext arg.",
    "documentation": null,
    "insertText": "ctx: ResGraphContext.context"
  }]}
Complete tests/Completion.res 9:36
XXX Not found!
{"status": "Completion", "items": [{
    "label": "ctx: ResGraphContext.context",
    "kind": 4,
    "tags": [],
    "detail": "Insert ResGraphContext arg.",
    "documentation": null,
    "insertText": "ctx: ResGraphContext.context"
  }]}
